const user1 = 'John';
const user2 = 'Alex';

const users = ['John', 'Alex'];
// –ï—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
const newArray = new Array(['John', 'Alex']);
console.log(users[1], '--- –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞');
users[2] = 'Lesli';
users[1] = 'Foo'; // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
users[10] = 'Kiwi'; // –¥–µ–ª–∞–µ—Ç –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞–π 11 –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É 3 –∏ 9 undefined

const usersLength = users.length;

console.log(users, '--- users');
console.log(`–î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: ${usersLength}`);
console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞: ${users[usersLength - 1]}`);

//_____________________________

const cars = ["audi", "bmw", "ford", "fiat"];
let result = "";

/** –¶–∏–∫–ª for */
// –≤—ã–≤–µ—Å—å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
for (let i = 0; i < cars.length; i += 2) {
  result += ` ${cars[i]}`;
}

console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º—ã —á–µ—Ç–Ω—ã—Ö: ${result.trim()}`);

/** –¶–∏–∫–ª for of */
let allCars = "";
for (const car of cars) {
  allCars += ` ${car}`;
}

console.log(`–í—Å–µ –º–∞—à–∏–Ω—ã: ${allCars.trim()}`);

/** –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ */
let carIndex;

for (let i = 0; i < cars.length; i += 1) {
  if (cars[i] === "bmw") {
    carIndex = i;
    break;
  }
}

console.log(`–ë–ú–í –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º: ${carIndex}`);

/** –ï—Å–ª–∏ –∞—É–¥–∏ –∏–ª–∏ –±–º–≤ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–µ –º–∞—à—Ç–Ω—ã */
const niceCars = ["audi", "bmw", "toyota"];

for (const car of cars) {
  if (niceCars.includes(car)) {
    console.log(`–û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞: ${car}`);
    continue;
  }

  console.log(`–í—ã–±—Ä–∞–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∏—á–µ–≥–æ —Ç–∞–∫: ${car}`);
}

/** –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é */
const a = 10;
let b = a;
b = 5;

console.log(a, b);

const foo = [1, 2, 3];
const baz = [1, 2, 3];
const bar = foo;
bar[0] = 15;

console.log(foo, bar);
// –ó–¥–µ—Å—å –≤–µ—Ä–Ω–µ—Ç true —Ç–∞–∫ –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ
console.log(foo === bar, "—Ä–∞–≤–Ω—ã –ª–∏ –º–∞—Å—Å–∏–≤—ã foo & bar");
// –ó–¥–µ—Å—å –≤–µ—Ä–Ω–µ—Ç false —Ç–∞–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∏ —Ä–∞–∑–Ω—ã–µ
console.log(foo === baz, "—Ä–∞–≤–Ω—ã –ª–∏ –º–∞—Å—Å–∏–≤—ã foo & baz");

//______________________________

const words = ["JavaScript", "—ç—Ç–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"];
console.log(words.join("üòà")); // "JavaScript-—ç—Ç–æ-–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"

const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
if (clients.indexOf("Monkong") === -1) {
  console.log("Monkong –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

if (!clients.includes("Monkong")) {
  console.log("Monkong –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

/** –ó–∞—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –º–∞—à–∏–Ω */
let cars = [];

// while (true) {
//   const car = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—à–∏–Ω—ã');

//   if (!car) break;

//   cars.push(car);
//   console.log(cars);
// }

const lastCar = cars.pop();
console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${lastCar}`);
console.log(cars, "–ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞ pop");

/** –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ */
{
  const fruits = ["kiwi", "banana", "apple", "ananas", "cucumber"];

  const fruitsWithoutEdgeElements = fruits.slice(1, fruits.length - 1);
  console.log(fruits, "–∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –ø–æ—Å–ª–µ slice");
  console.log(fruitsWithoutEdgeElements, "—Ñ—Ä—É–∫—Ç—ã –±–µ–∑ –∫—Ä–∞–π–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");

  const fruitsSplice = fruits.splice(1, 3, "audi");
  console.log(fruitsSplice, "splice fruits");
  console.log(fruits, "–∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –ø–æ—Å–ª–µ splice");
}

/** –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤—ã –≤ —Ç–æ–≤–∞—Ä—ã */
{
  const fruits = ["kiwi", "banana", "apple", "ananas"];
  const vegetables = ["cabbage", "tomato", "cucumber"];

  const meals = fruits.concat(vegetables);
  // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è spread –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  // const meals1 = [...fruits, ...vegetables];
  console.log(`–í—Å–µ —Ç–æ–≤–∞—Ä—ã: ${meals}`);
}